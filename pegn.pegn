# PEGN pegn.dev/spec/2023-04/pegn.pegn
# Copyright 2023 Robert S Muhlestein (rob@rwx.gg)
# SPDX-License-Identifier: Apache-2

# Only grammars that are expressed in Unicode (UTF-8) can be specified
# with PEGN, but any (dot) can be assigned explicitly defining a Unicode
# subset for the entire grammar (ex: . <- p{French} / ws / upunct).

. <- uprint / LF         # default for all PEGN grammars when undefined

Grammar <- (Blank / CmtLine / Def)+
Blank   <- SP* LF
CmtLine <- '#' SP Cmt LF
Cmt     <- uprint+
Def     <- Name SP+ '<-' SP+ Rule (SP+ Comment) LF
Name    <- (alpha alnum+) / '.'
Rule    <- RRule / Seq / One / Count / Save / Val / Ref / Look
         / String / Rune / To
Count   <- Opt / Mn0 / Mn1 / Min / Max / Mmx / Rep
Rune    <- '.' / RRune / Range / Class / UniProp / Hexadec / Unicode
String  <- SQ uprint+ SQ
Seq     <- '(' Rule (WS+ Rule)* ')' / Rule (WS+ Rule)*
One     <- '(' Rule (WS+ '/' WS+ Rule)* ')' / Rule (WS+ '/' WS+ Rule)*
Ref     <- Name
Save    <- '=' Name
Value   <- '$' Name

Lookable <- !Look !To !END Rule
Look     <- See / Not
See      <- '&' Lookable
Not      <- '!' Lookable

Countable <- Seq / One / Val / Ref / Str / Rune
Opt       <- Countable '?'
Min0      <- Countable '*'
Min1      <- Countable '+'
Min       <- Countable '{' digit+ ',}'
Max       <- Countable '{,' digit+ '}'
MinMax    <- Countable '{' digit+ ',' digit+ '}'
Repeat    <- Countable '{' digit+ '}'

To     <- ToOpt / ToMn0 / ToMn1 / ToMax / ToMin / ToRep / ToMnx / ToRune
ToOpt  <- '..?' SP+ !To &Rule
ToMn0  <- '..*' SP+ !To &Rule
ToMn1  <- '..+' SP+ !To &Rule
ToMax  <- '..{,' digit+ '}' SP+ !To &Rule
ToRep  <- '..{' digit+ '}' SP+ !To &Rule
ToMin  <- '..{' digit+ ',}' SP+ !To &Rule
ToMnx  <- '..{' digit+ ',' digit+ '}' SP+ !To &Rule
ToRune <- '..' SP+ !To &Rule

Range      <- AlphaRange / DigitRange / UniRange / HexRange
AlphaRange <- LowerRange / UpperRange
LowerRange <- '[' lower '-' lower ']'       # [a-z]
UpperRange <- '[' upper '-' upper ']'       # [A-Z]
DigitRange <- '[' digit '-' digit ']'       # [0-9]
UniRange   <- '[' Unicode '-' Unicode ']'   # [u0000-u10FFFF]
HexRange   <- '[' Hexadec '-' Hexadec ']'   # [x20-x2F] [xFFFFF - x1FFFFF]
Unicode    <- 'u' ('10' uphex / uphex{4,5}) # u7024
Hexadec    <- 'x' uphex{2,}                 # x20

# Anything is allowed as a Unicode class qualifier to accommodate
# changes to Unicode categories, scripts, and properties over time.
# Implementations may choose to follow an In*/Is* convention or explicit
# '=' notation. PEGN leaves these details unspecified but recommends one
# Unicode qualifier per rule (avoid joining with comma, etc.) since most
# language implementations have functions or tables that match these
# qualifiers.

UniProp  <- 'p{' ..+ '}'                    # p{Cyrillic}

# class names are lowercaser by convention

Class <- 'alpha' / 'lower' / 'upper' / 'alnum' / 'ascii' / 'blank'
       / 'cntrl' / 'graph' / 'print' / 'space' / 'word' / 'symbol'
       / 'sign' / 'xdigit' / 'uphex' / 'lowhex' / 'digit'
       / 'uprint' / 'ugraphic' / 'uletter' / 'ulower' / 'uupper'
       / 'udigit' / 'ucontrol' / 'umark' / 'unumber' / 'upunct'
       / 'uspace' / 'usymbol' / 'utitle' / 'rune'

# mostly from POSIX

alpha  <- [A-Z] / [a-z]
lower  <- [a-z]
upper  <- [A-Z]
alnum  <- lower / upper / [0-9]
ascii  <- [x0-x7F]
blank  <- SP / TAB
cntrl  <- [x00-x1F] / [x7F-x9F]
graph  <- [x21-x7E]                    # all visible ascii
print  <- [x20-x7E]                    # all visible + space
ws     <- SP / TAB / LF / CR           # (common ws)
space  <- ws / x0B / x0F               # [:space:] \s
word   <- upper / lower / digit / '_'  # [:word:]  \w
symbol <- [x21-x2F] / [x3A-x40] / [x5B-x60] / [x7B-x7E]
sign   <- '+' / '-'
xdigit <- [0-9] / [a-f] / [A-F]
uphex  <- [0-9] / [A-F]
lowhex <- [0-9] / [a-f]
digit  <- [0-9]

# inspired by Go unicode package

rune     <- [u0000-u10FFFF]
uprint   <- uletter / umark / unumber / upunct / usymbol / SP
ugraphic <- uprint / p{Zs}
uletter  <- p{Ll} / p{Lm} / p{Lo} / p{Lt} / p{Lu}
ulower   <- p{Ll}
uupper   <- p{Lu}
udigit   <- p{Nd}
ucontrol <- p{Cc} / p{Cf} / p{Co} / p{Cs}
umark    <- p{Mc} / p{Me} / p{Mn}
unumber  <- p{Nd} / p{Nl} / p{No}
upunct   <- p{Pc} / p{Pd} / p{Pe} / p{Pf} / p{Pi} / p{Po} / p{Ps}
uspace   <- p{Zl} / p{Zp} / p{Zs}
usymbol  <- p{Sc} / p{Sk} / p{Sm} / p{So}
utitle   <- p{Lt}

# common or reserved rules are caps by convention
# (and ususally under 5 in length)

RRule <- 'END' / 'NL' / 'WS'

END <- '!.'     # (less cryptic)
NL  <- xD? xA   # "\r?\n"
WS  <- SP / LF  # (PEGN ws)

RRune <- 'TAB' / 'LF' / 'CR' / 'SP' / 'DQ' / 'BQ' / 'SQ'
       / 'UNKNOWN' / 'MAXRUNE' / 'MAXASCII' / 'MAXLATIN'

TAB <- x9   # "\t"
LF  <- xA   # "\n" (line feed)
CR  <- xD   # "\r" (carriage return)
SP  <- x20  # " "
DQ  <- x22  # "
BQ  <- x60  # `
SQ  <- x27  # '

UNKNOWN  <- uFFFD
MAXRUNE  <- u10FFFF
MAXASCII <- x7F
MAXLATIN <- xFF
