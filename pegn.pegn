# PEGN pegn.dev/spec/2023-01/pegn.pegn
# Copyright 2023 Robert S Muhlestein (rob@rwx.gg)
# SPDX-License-Identifier: Apache-2
# Include pegn.dev/spec/2023-01/classes.pegn
# Include pegn.dev/spec/2023-01/literals.pegn

Spec      <- Meta? Rules
Meta      <- '# ' Ident Home LF Copyright? License? Include*
Rules     <- (BlankLine / Comment / LiteralDef / ClassDef / RuleDef)+
Ident     <- upper{2,12}
Home      <- Path
Path      <- (!ws rune)+
Copyright <- '# ' < 'Copyright ' rune+ > LF
License   <- '# SPDX-License-Identifier: ' < SPDXID > LF
Include   <- '# Include ' Path LF
Comment   <- '# ' < (!LF rune)+ >

# ----------------------------------------------------------------------

Name      <- RuleName / ClassName / LitName

RuleDef   <- RuleName
Class     <- ClassName SP+ '<-' SP+ ClassExpr
Literal   <- LitName SP+ '<-' SP+
             LitVal (Spacing LitVal)*
             ComEndLine

Comment   <- (!EndLine rune)+

LitVal    <- Unicode / Binary / Hexadec / Octal / SQ String SQ

MajorVer  <- digit+
MinorVer  <- digit+
PatchVer  <- digit+
PreVer    <- (word / DASH)+ ('.' (word / DASH)+)*

RuleId    <- (upper lower+)+
ClassId   <- RClassId / lower (lower / UNDER lower)+
LitIdent  <- RLitIdent / upper (upper / UNDER upper)+

Expr      <- Sequence (Spacing '/' SP+ Sequence)*
ClassExpr <- Simple (Spacing '/' SP+ Simple)*

Simple    <- Unicode / Binary / Hexadec / Octal
           / ClassIdent / LitIdent / Range / SQ String SQ

Spacing   <- ComEndLine? SP+

Sequence  <- Rule (Spacing Rule)*
Rule      <- PosLook / NegLook / Plain
Plain     <- Primary Quant?
LookPos   <- '&' Primary Quant?
LookNeg   <- '!' Primary Quant?
To        <- '...' Primary Quant?
ToIncl    <- '..' Primary Quant?
Primary   <- Simple / CheckId / '(' Expr ')'

Quant     <- Optional / Min0 / Min1 / Max / MinMax / Min / Repeat
Optional  <- '?'
Min0      <- '*'
Min1      <- '+'
Max       <- '{0,' digit+ '}'
MinMax    <- '{' digit+ ',' digit+ '}'
Min       <- '{' digit+ ',}'
Repeat    <- '{' digit+ '}'

Range     <- AlphaRange / IntRange / UniRange
           / BinRange / HexRange / OctRange

LowRng    <- '[' lower '-' lower ']'      # [a-m]
UprRng    <- '[' upper '-' upper ']'      # [A-Z]
DigRng    <- '[' digit '-' digit ']'      # [0-9]
UniRng    <- '[' Unicode '-' Unicode ']'  # [u0000-u10FFFF]
HexRng    <- '[' Hexadec '-' Hexadec ']'  # [x20-x2F] [xFFFFF - x1FFFFF]
OctRng    <- '[' Octal '-' Octal ']'      # [o20-o37]

Field      <-- uvisible+

String     <- (quotable / SP)+
Unicode    <- 'u' ('10' uphex / uphex{4,5})
Integer    <- digit+
Binary     <- 'b' bindig+  # b1 == b00000001 (0 pad to closest byte)
Hexadec    <- 'x' uphex+
Octal      <- 'o' octdig+
Quoted     <- SQ (!SQ uprint+ )SQ

EndPara    <-- ws* (!. / EndLine !. / EndLine{2})

RClassIdent <-- 'alphanum' / 'alpha' / 'any' / 'bindig' / 'control'
             / 'digit' / 'hexdig' / 'lowerhex' / 'lower' / 'octdig'
             / 'punct' / 'quotable' / 'sign' / 'uphex' / 'upper'
             / 'visible' / 'ws' / 'alnum' / 'ascii' / 'blank' / 'cntrl'
             / 'graph' / 'print' / 'space' / 'word' / 'xdigit' / 'unipoint'

RLitIdent <-- 'TAB' / 'CRLF' / 'CR' / 'LFAT' / 'SP' / 'VT' / 'FF' / 'NOT'
             / 'BANG' / 'DQ' / 'HASH' / 'DOLLAR' / 'PERCENT' / 'AND'
             / 'SQ' / 'LPAREN' / 'RPAREN' / 'STAR' / 'PLUS' / 'COMMA'
             / 'DASH' / 'MINUS' / 'DOT' / 'SLASH' / 'COLON' / 'SEMI' / 'LT'
             / 'EQ' / 'GT' / 'QUERY' / 'QUESTION' / 'AT' / 'LBRAKT'
             / 'BKSLASH' / 'RBRAKT' / 'CARET' / 'UNDER' / 'BKTICK'
             / 'LCURLY' / 'LBRACE' / 'BAR' / 'PIPE' / 'RCURLY'
             / 'RBRACE' / 'TILDE' / 'UNKNOWN' / 'REPLACE' / 'MAXRUNE'
             / 'MAXASCII' / 'MAXLATIN' / 'LARROWF' / 'RARROWF' / 'LLARROW'
             / 'RLARROW' / 'LARROW' / 'LF' / 'RARROW' / 'RFAT'
             / 'WALRUS' / 'ENDOFDATA'
